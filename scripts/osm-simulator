#! /usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import threading
from time import sleep

from pymodbus.datastore import ModbusServerContext, ModbusSlaveContext, ModbusSparseDataBlock
from pymodbus.server.sync import StartSerialServer, StartTcpServer, StartUdpServer
from pymodbus.transaction import ModbusRtuFramer


def SimOSM(arg):
    drivers = []
    store = {i: ModbusSlaveContext(ModbusSparseDataBlock.create()) for i in range(32)}
    context = ModbusServerContext(slaves=store, single=False)

    for i,_ in enumerate(context):
        context[i].setValues(fx=3, address=0, values=[i])
        context[i].setValues(fx=3, address=1, values=[6])
        context[i].setValues(fx=3, address=2, values=[25])
        context[i].setValues(fx=3, address=3, values=[0])
        context[i].setValues(fx=3, address=4, values=[0])
        context[i].setValues(fx=3, address=5, values=[0])
        context[i].setValues(fx=3, address=6, values=[0])
        context[i].setValues(fx=3, address=7, values=[1])
        context[i].setValues(fx=3, address=8, values=[63])
        context[i].setValues(fx=3, address=9, values=[50])
        context[i].setValues(fx=3, address=10, values=[0])
        context[i].setValues(fx=3, address=11, values=[0])
        context[i].setValues(fx=3, address=12, values=[10])

        context[i].setValues(fx=3, address=16384, values=[4])
        context[i].setValues(fx=3, address=16385, values=[0])
        context[i].setValues(fx=3, address=16386, values=[0])
        context[i].setValues(fx=3, address=16387, values=[0])
        context[i].setValues(fx=3, address=16388, values=[0])
        context[i].setValues(fx=3, address=16389, values=[0])
        context[i].setValues(fx=3, address=16390, values=[0])
        context[i].setValues(fx=3, address=16391, values=[0])
        context[i].setValues(fx=3, address=16392, values=[2000])
        context[i].setValues(fx=3, address=16393, values=[0])

        context[i].setValues(fx=3, address=32768, values=[0, 0])
        context[i].setValues(fx=3, address=32770, values=[0, 0])
        context[i].setValues(fx=3, address=32772, values=[0, 0])
        context[i].setValues(fx=3, address=32776, values=[0, 0])
        context[i].setValues(fx=3, address=32778, values=[0, 0])

        driver = Driver(context[i])
        driver.daemon = True
        driver.start()

        drivers.append(driver)

    try:
        if arg.tcp:
            StartTcpServer(context, address=("localhost", 5020))
        elif arg.udp:
            StartUdpServer(context, address=("localhost", 5020))
        elif arg.serial:
            StartSerialServer(context, framer=ModbusRtuFramer,
                              port=arg.serial[0], timeout=0.01, baudrate=57600)
    except KeyboardInterrupt:
        for driver in drivers:
            driver.stop = True
        for driver in drivers:
            driver.join()


class Driver(threading.Thread):
    def __init__(self, context):
        threading.Thread.__init__(self)

        self.context = context
        self.first_run = True
        self.stop = False

    def run(self):
        while not self.stop:
            # address       = self.context.getValues(fx=3, address=0)[0]
            # baudrateindex = self.context.getValues(fx=3, address=1)[0]
            # rtsdelay      = self.context.getValues(fx=3, address=2)[0]
            enable          = self.context.getValues(fx=3, address=3)[0]
            direction       = self.context.getValues(fx=3, address=4)[0]
            command         = self.context.getValues(fx=3, address=5)[0]
            # output        = self.context.getValues(fx=3, address=6)[0]
            microstep       = self.context.getValues(fx=3, address=7)[0]
            # inputs        = self.context.getValues(fx=3, address=8)[0]
            # sleepcurrent  = self.context.getValues(fx=3, address=9)[0]
            # inten         = self.context.getValues(fx=3, address=10)[0]
            # intmode       = self.context.getValues(fx=3, address=11)[0]
            # systemid      = self.context.getValues(fx=3, address=12)[0]
            # uartdelay     = self.context.getValues(fx=3, address=16384)[0]
            speed           = self.context.getValues(fx=3, address=16385)[0]
            # startspeed    = self.context.getValues(fx=3, address=16386)[0]
            # accel         = self.context.getValues(fx=3, address=16387)[0]
            # endspeed      = self.context.getValues(fx=3, address=16388)[0]
            # current       = self.context.getValues(fx=3, address=16389)[0]
            # speedcurrent  = self.context.getValues(fx=3, address=16390)[0]
            # stepsbefdecel = self.context.getValues(fx=3, address=16391)[0]
            # sleeptime     = self.context.getValues(fx=3, address=16392)[0]
            # encounter     = self.context.getValues(fx=3, address=16393)[0]
            stepsnumber     = self.context.getValues(fx=3, address=32768, count=2)
            position        = self.context.getValues(fx=3, address=32770, count=2)
            stepscounter    = self.context.getValues(fx=3, address=32772, count=2)
            # intcounter      = self.context.getValues(fx=3, address=32776, count=2)
            # encoderposition = self.context.getValues(fx=3, address=32778, count=2)

            stepsnumber = (stepsnumber[0] << 16) + stepsnumber[1]
            position = (position[0] << 16) + position[1]
            stepscounter = (stepscounter[0] << 16) + stepscounter[1]
            # intcounter = (intcounter[0] << 16) + intcounter[1]
            # encoderposition = (encoderposition[0] << 16) + encoderposition[1]

            if enable:
                {0x00: lambda: self.stop_moving(),
                 0x01: lambda: self.unlimited_moving(speed, microstep, position, direction),
                 0x02: lambda: self.move_steps(stepsnumber, stepscounter, speed, microstep, position, direction),
                 0x03: lambda: self.move_to_edge(speed, microstep, position, direction),
                 0x04: lambda: self.move_to_edge(speed, microstep, position, direction),
                 0x09: lambda: self.move_to_edge(speed, microstep, position, direction),
                 0x0A: lambda: self.move_to_edge(speed, microstep, position, direction),
                 0x0B: lambda: self.move_to_edge(speed, microstep, position, direction),
                 0x0C: lambda: self.reset(),
                 0x0D: lambda: self.move_to_edge_with_steps(stepsnumber, stepscounter, speed, microstep, position, direction),
                 0x0E: lambda: self.move_to_edge_with_steps(stepsnumber, stepscounter, speed, microstep, position, direction),
                 0x0F: lambda: self.move_to_edge_with_steps(stepsnumber, stepscounter, speed, microstep, position, direction),
                 0x10: lambda: self.move_to_edge_with_steps(stepsnumber, stepscounter, speed, microstep, position, direction),
                 0x11: lambda: self.move_to_edge_with_steps(stepsnumber, stepscounter, speed, microstep, position, direction),
                }[command]()

            # print("Command = {:2d}, Speed = {:4d}, Position = {:5d}, "
            #       "StepsNumber = {:5d}, StepsCounter = {:5d}, Inputs = {:3d}".
            #       format(command, speed, position, stepsnumber, stepscounter, inputs))

            sleep(1.0)

    def stop_moving(self):
        ''' Остановка двигателя '''

        self.context.setValues(fx=3, address=5, values=[0])
        self.context.setValues(fx=3, address=16385, values=[0])
        self.set_speed_current(0)

    def reset(self):
        ''' Перезагрузка контроллера. Все параметры сбрасываются,
            движение прекращается '''

        self.stop_moving()
        self.context.setValues(fx=3, address=8, values=[0x3F])

    def unlimited_moving(self, speed, microstep, position, direction):
        ''' Бесконечное движение '''

        self.set_speed_current(speed)
        position = self.set_position(position, direction, speed, microstep)
        self.check_edge(position)

    def move_steps(self, stepsnumber, stepscounter, speed, microstep, position, direction):
        ''' Движение stepsnumber шагов '''

        if self.set_steps_counter(stepsnumber, stepscounter, speed, microstep):
            self.first_run = True
            self.stop_moving()

        self.unlimited_moving(speed, microstep, position, direction)

    def move_to_edge(self, speed, microstep, position, direction):
        ''' Движение до срабатывания датчика, подключенного ко входу (только IN1 и IN2) '''

        self.unlimited_moving(speed, microstep, position, direction)

    def move_to_edge_with_steps(self, stepsnumber, stepscounter, speed, microstep, position, direction):
        ''' Движение до срабатывания датчика, подключенного ко входу (только IN1 и IN2),
            но не более stepsnumber шагов '''

        self.move_steps(stepsnumber, stepscounter, speed, microstep, position, direction)

    def set_position(self, position, direction, speed, microstep):
        position = position - int(speed/microstep) if direction else \
                   position + int(speed/microstep)
        position = min(position, 10000)
        position = max(position, 0)

        self.context.setValues(fx=3, address=32770, values=[(position & 0xFFFF0000) >> 16,
                                                            position & 0x0000FFFF])
        return position

    def set_speed_current(self, speed):
        self.context.setValues(fx=3, address=16390, values=[speed])

    def set_steps_counter(self, stepsnumber, stepscounter, speed, microstep):
        stepscounter = stepsnumber - int(speed/microstep) if self.first_run else \
                       stepscounter - int(speed/microstep)
        self.context.setValues(fx=3, address=32772, values=[(stepscounter & 0xFFFF0000) >> 16,
                                                            stepscounter & 0x0000FFFF])
        self.first_run = False
        return stepscounter == 0

    def check_edge(self, position):
        if position == 0:
            self.context.setValues(fx=3, address=8, values=[0x3D])
            self.stop_moving()
        elif 0 < position < 10000:
            self.context.setValues(fx=3, address=8, values=[0x3F])
        elif position == 10000:
            self.context.setValues(fx=3, address=8, values=[0x3B])
            self.stop_moving()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='OSM stepper driver simulator command-line option')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--tcp', action='store_true', help='Use TCP simulator')
    group.add_argument('--udp', action='store_true', help='Use UDP simulator')
    group.add_argument('--serial', type=str, nargs=1, metavar=('PORT'), help='Use SERIAL simulator')
    args = parser.parse_args()

    SimOSM(args)
