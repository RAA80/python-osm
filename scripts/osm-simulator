#! /usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import argparse
import threading
import time

from pymodbus.server.sync import StartTcpServer, StartUdpServer, StartSerialServer
from pymodbus.device import ModbusDeviceIdentification
from pymodbus.datastore import ModbusSparseDataBlock, ModbusSlaveContext, ModbusServerContext
from pymodbus.transaction import ModbusRtuFramer


def Process(args):
    store = {i: ModbusSlaveContext(ModbusSparseDataBlock.create()) for i in range(32)}
    context = ModbusServerContext(slaves=store, single=False)
    for i in range(32):
        context[i].setValues(fx=3, address=0, values=[1])
        context[i].setValues(fx=3, address=1, values=[6])
        context[i].setValues(fx=3, address=2, values=[25])
        context[i].setValues(fx=3, address=3, values=[0])
        context[i].setValues(fx=3, address=4, values=[0])
        context[i].setValues(fx=3, address=5, values=[0])
        context[i].setValues(fx=3, address=6, values=[0])
        context[i].setValues(fx=3, address=7, values=[1])
        context[i].setValues(fx=3, address=8, values=[63])
        context[i].setValues(fx=3, address=9, values=[50])
        context[i].setValues(fx=3, address=10, values=[0])
        context[i].setValues(fx=3, address=11, values=[0])
        context[i].setValues(fx=3, address=12, values=[10])

        context[i].setValues(fx=3, address=16384, values=[4])
        context[i].setValues(fx=3, address=16385, values=[0])
        context[i].setValues(fx=3, address=16386, values=[0])
        context[i].setValues(fx=3, address=16387, values=[0])
        context[i].setValues(fx=3, address=16388, values=[0])
        context[i].setValues(fx=3, address=16389, values=[0])
        context[i].setValues(fx=3, address=16390, values=[0])
        context[i].setValues(fx=3, address=16391, values=[0])
        context[i].setValues(fx=3, address=16392, values=[2000])
        context[i].setValues(fx=3, address=16393, values=[0])

        context[i].setValues(fx=3, address=32768, values=[0,0])
        context[i].setValues(fx=3, address=32770, values=[0,0])
        context[i].setValues(fx=3, address=32772, values=[0,0])
        context[i].setValues(fx=3, address=32776, values=[0,0])
        context[i].setValues(fx=3, address=32778, values=[0,0])

        thr = threading.Thread(target=Worker, args=(context[i],))
        thr.daemon = True
        thr.start()

    # initialize the server information
    identity = ModbusDeviceIdentification()
    identity.VendorName = 'OSM'
    identity.ProductCode = 'Simulator'
    identity.VendorUrl = ''
    identity.ProductName = 'OSM Simulator'
    identity.ModelName = 'OSM Simulator'
    identity.MajorMinorRevision = '0.1.0'

    try:
        if args.tcp:
            StartTcpServer(context, identity=identity, address=("localhost", 5020))
        elif args.udp:
            StartUdpServer(context, identity=identity, address=("localhost", 5020))
        elif args.serial:
            StartSerialServer(context, framer=ModbusRtuFramer, identity=identity,
                              port=args.serial[0], timeout=0.01, baudrate=57600)
    except KeyboardInterrupt:
        exit(0)


def Worker(context):
    timer = 0

    while True:
        Address         = context.getValues(fx=3, address=0)[0]
        BaudRateIndex   = context.getValues(fx=3, address=1)[0]
        RtsDelay        = context.getValues(fx=3, address=2)[0]
        Enable          = context.getValues(fx=3, address=3)[0]
        Direction       = context.getValues(fx=3, address=4)[0]
        Command         = context.getValues(fx=3, address=5)[0]
        Output          = context.getValues(fx=3, address=6)[0]
        Microstep       = context.getValues(fx=3, address=7)[0]
        Inputs          = context.getValues(fx=3, address=8)[0]
        SleepCurrent    = context.getValues(fx=3, address=9)[0]
        IntEn           = context.getValues(fx=3, address=10)[0]
        IntMode         = context.getValues(fx=3, address=11)[0]
        SystemId        = context.getValues(fx=3, address=12)[0]
        UartDelay       = context.getValues(fx=3, address=16384)[0]
        Speed           = context.getValues(fx=3, address=16385)[0]
        StartSpeed      = context.getValues(fx=3, address=16386)[0]
        Accel           = context.getValues(fx=3, address=16387)[0]
        EndSpeed        = context.getValues(fx=3, address=16388)[0]
        Current         = context.getValues(fx=3, address=16389)[0]
        SpeedCurrent    = context.getValues(fx=3, address=16390)[0]
        StepsBefDecel   = context.getValues(fx=3, address=16391)[0]
        SleepTime       = context.getValues(fx=3, address=16392)[0]
        EnCounter       = context.getValues(fx=3, address=16393)[0]
        StepsNumber     = context.getValues(fx=3, address=32768, count=2)
        Position        = context.getValues(fx=3, address=32770, count=2)
        StepsCounter    = context.getValues(fx=3, address=32772, count=2)
        IntCounter      = context.getValues(fx=3, address=32776, count=2)
        EncoderPosition = context.getValues(fx=3, address=32778, count=2)

        StepsNumber = (StepsNumber[0] << 16) + StepsNumber[1]
        Position =  (Position[0] << 16) + Position[1]
        StepsCounter = (StepsCounter[0] << 16) + StepsCounter[1]
        IntCounter = (IntCounter[0] << 16) + IntCounter[1]
        EncoderPosition = (EncoderPosition[0] << 16) + EncoderPosition[1]

        if Enable:
            if Command == 0x00:
                # Остановка двигателя
                context.setValues(fx=3, address=16385, values=[0])
                changeSpeedCurrent(context, 0)

            elif Command == 0x01:
                # Бесконечное движение
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)

            elif Command == 0x02:
                # Движение Steps_Number шагов
                StepsCounter = changeStepsCounter(context, StepsNumber, StepsCounter, Speed, Microstep)

                if StepsCounter <= 0:
                    context.setValues(fx=3, address=32772, values=[0,0])
                    context.setValues(fx=3, address=5, values=[0])

                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)

            elif Command == 0x03:
                # Движение до срабатывания датчика, подключенного ко входу STEP
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdge(context, timer, Inputs, 0x1F)

            elif Command == 0x04:
                # Движение до срабатывания датчика, подключенного ко входу DIR
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdge(context, timer, Inputs, 0xF7)

            elif Command == 0x05:
                # Команда устанавливает текущее значение скорости в соответствии
                # со значением напряжения на аналоговом входе
                print("Command not implemented. Maybe later")

            elif Command == 0x06:
                # Системная команда
                print("Command not implemented. Maybe later")

            elif Command == 0x07:
                # Системная команда
                print("Command not implemented. Maybe later")

            elif Command == 0x08:
                # Реверс
                print("Command not implemented. Maybe later")

            elif Command == 0x09:
                # Движение до срабатывания датчика, подключенного ко входу IN1
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdge(context, timer, Inputs, 0xFD)

            elif Command == 0x0A:
                # Движение до срабатывания датчика, подключенного ко входу IN2
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdge(context, timer, Inputs, 0xFB)

            elif Command == 0x0B:
                # Движение до срабатывания датчика, подключенного ко входу HOME
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdge(context, timer, Inputs, 0xFE)

            elif Command == 0x0C:
                # Перезагрузка контроллера. Все параметры сбрасываются, движение прекращается
                context.setValues(fx=3, address=8, values=[63])
                context.setValues(fx=3, address=5, values=[0])

            elif Command == 0x0D:
                # Движение до срабатывания датчика, подключенного ко входу In1,
                # но не более Steps_Number шагов
                StepsCounter = changeStepsCounter(context, StepsNumber, StepsCounter, Speed, Microstep)
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdgeWithSteps(context, timer, Inputs, StepsCounter, 0xFD)

            elif Command == 0x0E:
                # Движение до срабатывания датчика, подключенного ко входу In2,
                # но не более Steps_Number шагов
                StepsCounter = changeStepsCounter(context, StepsNumber, StepsCounter, Speed, Microstep)
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdgeWithSteps(context, timer, Inputs, StepsCounter, 0xFB)

            elif Command == 0x0F:
                # Поиск начального положения (движение до сигнала датчика HomeIn,
                # но не более Steps_Number шагов)
                StepsCounter = changeStepsCounter(context, StepsNumber, StepsCounter, Speed, Microstep)
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdgeWithSteps(context, timer, Inputs, StepsCounter, 0xFE)

            elif Command == 0x10:
                # Движение до срабатывания датчика, подключенного ко входу STEP,
                # но не более Steps_Number шагов
                StepsCounter = changeStepsCounter(context, StepsNumber, StepsCounter, Speed, Microstep)
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdgeWithSteps(context, timer, Inputs, StepsCounter, 0x1F)

            elif Command == 0x11:
                # Движение до срабатывания датчика, подключенного ко входу DIR,
                # но не более Steps_Number шагов
                StepsCounter = changeStepsCounter(context, StepsNumber, StepsCounter, Speed, Microstep)
                changeSpeedCurrent(context, Speed)
                changePosition(context, Position, Direction, Speed, Microstep)
                timer = moveIntoEdgeWithSteps(context, timer, Inputs, StepsCounter, 0xF7)

            elif Command == 0x12:
                # Сделать один шаг
                print("Command not implemented. Maybe later")

            elif Command == 0x13:
                # Сохранить параметры движения, микрошага и тока в энергонезависимую память
                print("Command not implemented. Maybe later")

            else:
                print("Unknown command. Ignoring")

        # print("Command = {:2d}, Speed = {:5d}, SpeedCurrent = {:5d}, "
        #       "Microstep = {:2d}, Position = {:10d}, Direction = {:1d}, "
        #       "StepsNumber = {:10d}, StepsCounter = {:10d}, Inputs = {:2d}".
        #       format(Command, Speed, SpeedCurrent, Microstep, Position,
        #              Direction, StepsNumber, StepsCounter, Inputs), end="\r")

        time.sleep(1.0)


def changePosition(context, Position, Direction, Speed, Microstep):
    if Direction:
        Position -= int(Speed/Microstep)
    else:
        Position += int(Speed/Microstep)

    Position_High = (Position & 0xFFFF0000) >> 16
    Position_Low  = Position & 0x0000FFFF

    context.setValues(fx=3, address=32770, values=[Position_High, Position_Low])

    return context


def changeSpeedCurrent(context, Speed):
    context.setValues(fx=3, address=16390, values=[Speed])

    return context


def moveIntoEdge(context, timer, Inputs, bits):
    timer += 1
    if timer >= 5:
        timer = 0
        context.setValues(fx=3, address=8, values=[Inputs & bits])
        context.setValues(fx=3, address=5, values=[0])

    return timer


def moveIntoEdgeWithSteps(context, timer, Inputs, StepsCounter, bits):
    timer = moveIntoEdge(context, timer, Inputs, bits)

    if timer == 0:
        context.setValues(fx=3, address=32772, values=[0,0])
    elif StepsCounter <= 0:
        timer = 0
        context.setValues(fx=3, address=32772, values=[0,0])
        context.setValues(fx=3, address=5, values=[0])

    return timer


def changeStepsCounter(context, StepsNumber, StepsCounter, Speed, Microstep):
    StepsCounter += int(Speed/Microstep)
    StepsCounter_High = (StepsCounter & 0xFFFF0000) >> 16
    StepsCounter_Low  = StepsCounter & 0x0000FFFF

    context.setValues(fx=3, address=32772, values=[StepsCounter_High, StepsCounter_Low])

    return StepsNumber - StepsCounter


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='OSM stepper simulator command-line option')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--tcp', action='store_true', help='Use TCP simulator')
    group.add_argument('--udp', action='store_true', help='Use UDP simulator')
    group.add_argument('--serial', type=str, nargs=1, metavar=('PORT'), help='Use SERIAL simulator')

    parser.set_defaults(func=Process)

    args = parser.parse_args()
    args.func(args)
