#! /usr/bin/env python3

import contextlib
import logging
import os
import time
import tkinter as tk
from tkinter import ttk

from osm.client import CMD, Client
from osm.device import OSM17

if os.name == "nt":                                 # sys.platform == 'win32':
    from serial.tools.list_ports_windows import comports
elif os.name == "posix":
    import glob

    from serial.tools.list_ports_linux import SysFS

    def comports():
        devices = glob.glob("/dev/ttyS*")           # built-in serial ports
        devices.extend(glob.glob("/dev/ttyUSB*"))   # usb-serial with own driver
        devices.extend(glob.glob("/dev/ttyMI*"))    # MOXA serial devices
        return [info
                for info in [SysFS(d) for d in devices]
                if info.subsystem != "platform"]    # hide non-present internal serial ports
else:
    msg = "No implementation for your platform available"
    raise ImportError(msg)


class CreateToolTip:
    """Create a tooltip for a given widget."""

    def __init__(self, widget, text="widget info"):
        self.widget = widget
        self.text = text
        self.tw = None
        self.widget.bind("<Enter>", self.Enter)
        self.widget.bind("<Leave>", self.Close)

    def Enter(self, event=None):
        x = self.widget.winfo_rootx() + 25
        y = self.widget.winfo_rooty() + 20

        self.tw = tk.Toplevel(self.widget)
        self.tw.wm_overrideredirect(True)
        self.tw.wm_geometry("+%d+%d" % (x, y))

        label = tk.Label(self.tw, text=self.text, justify="left", background="#ffffe0")
        label.pack(ipadx=1)

        self.widget.after(3000, self.Close)

    def Close(self, event=None):
        if self.tw:
            self.tw.destroy()


class OsmGui(object):
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("OSM GUI")

        self.port_iid = []
        self.module_iid = []

        self.task = None
        self.tick_task = None
        self.id_awd10 = None
        self.transport = None
        self.id_osm = None

        # Окно "Сканирование"

        frame_scan = ttk.Frame(self.root, relief="groove", borderwidth=2)
        frame_scan.pack(side="left", fill="both", ipady=2, ipadx=2, pady=2, padx=2, expand=True)

        portframe = ttk.LabelFrame(frame_scan, text="Список портов в системе", labelanchor="n")
        portframe.pack(side="top", fill="both", pady=2, padx=2, expand=True)

        self.portlist = ttk.Treeview(portframe, columns=("Port"), selectmode="browse", height=5, show="headings")
        self.portlist.column("Port", width=100, anchor="center")
        self.portlist.heading("Port", text="Порт")
        self.portlist.pack(side="left", fill="both", pady=2, padx=2, expand=True)
        self.portlist.bind("<<TreeviewSelect>>", self.Port_Selected)

        iterator = sorted(comports())
        for (port, _, _) in iterator:
            iid = self.portlist.insert("", "end", values=port)
            self.port_iid.append(iid)

        port_scroll = ttk.Scrollbar(portframe, orient="vertical", command=self.portlist.yview)
        port_scroll.pack(side="right", fill="y")

        self.portlist.configure(yscrollcommand=port_scroll.set)

        self.varTimeout = tk.DoubleVar()
        self.spinTimeout = tk.Spinbox(frame_scan, textvariable=self.varTimeout, format="%0.1f", from_=0.2, to=1.0, increment=0.1, width=13, justify="center")
        self.spinTimeout.pack(side="top", pady=2, padx=2)
        CreateToolTip(self.spinTimeout, """Значение таймаута (сек)""")

        self.frame11 = ttk.Frame(frame_scan)
        self.frame11.pack(side="top", fill="x", pady=2, padx=2)

        self.buttonScan = ttk.Button(self.frame11, text="Начать сканирование", state="disabled", command=self.Button_Scan)
        self.buttonScan.pack(side="top", fill="x", pady=2, padx=2)

        self.progressbar = ttk.Progressbar(self.frame11, maximum=32 * 8)

        devframe = ttk.LabelFrame(frame_scan, text="Список активных модулей OSM", labelanchor="n")
        devframe.pack(side="top", fill="both", pady=2, padx=2, expand=True)

        self.modulelist = ttk.Treeview(devframe, columns=("address", "baudrate"), selectmode="browse", height=5, show="headings")
        self.modulelist.column("address", width=100, anchor="center")
        self.modulelist.column("baudrate", width=100, anchor="center")
        self.modulelist.heading("address", text="Адрес")
        self.modulelist.heading("baudrate", text="Битрейт")
        self.modulelist.pack(side="left", fill="both", pady=2, padx=2, expand=True)
        self.modulelist.bind("<<TreeviewSelect>>", self.Module_Selected)

        scroll = ttk.Scrollbar(devframe, orient="vertical", command=self.modulelist.yview)
        scroll.pack(side="right", fill="y")

        self.modulelist.configure(yscrollcommand=scroll.set)

        self.varDebug = tk.IntVar()
        self.checkDebug = ttk.Checkbutton(frame_scan, text="Режим отладки", variable=self.varDebug)
        self.checkDebug.pack(side="top", pady=2, padx=2)

        # Окно работы с выбранным устройством

        frame_work = ttk.Frame(self.root, relief="groove", borderwidth=2)
        frame_work.pack(side="left", fill="both", ipady=2, ipadx=2, pady=2, padx=2, expand=True)

        self.varConn = tk.IntVar()
        self.checkConn = tk.Checkbutton(frame_work, text="Связь", variable=self.varConn)
        self.checkConn.pack(side="top", pady=2)
        CreateToolTip(self.checkConn, """Статус связи с модулем:\n"""
                                      """Красный - связи нет\n"""
                                      """Зеленый - связь есть""")

        stateframe = ttk.LabelFrame(frame_work, text="Состояние входных регистров", labelanchor="n")
        stateframe.pack(side="top", fill="x", pady=2, padx=2, expand=True)

        self.varSTEP = tk.IntVar()
        self.checkSTEP = tk.Checkbutton(stateframe, text="STEP", variable=self.varSTEP)
        self.checkSTEP.pack(side="left", fill="x", pady=2, padx=2, expand=True)
        CreateToolTip(self.checkSTEP, """Регистр STEP""")

        self.varEN = tk.IntVar()
        self.checkEN = tk.Checkbutton(stateframe, text="EN", variable=self.varEN)
        self.checkEN.pack(side="left", fill="x", pady=2, padx=2, expand=True)
        CreateToolTip(self.checkEN, """Регистр EN""")

        self.varDIR = tk.IntVar()
        self.checkDIR = tk.Checkbutton(stateframe, text="DIR", variable=self.varDIR)
        self.checkDIR.pack(side="left", fill="x", pady=2, padx=2, expand=True)
        CreateToolTip(self.checkDIR, """Регистр DIR""")

        self.varIN2 = tk.IntVar()
        self.checkIN2 = tk.Checkbutton(stateframe, text="IN2", variable=self.varIN2)
        self.checkIN2.pack(side="left", fill="x", pady=2, padx=2, expand=True)
        CreateToolTip(self.checkIN2, """Регистр IN2""")

        self.varIN1 = tk.IntVar()
        self.checkIN1 = tk.Checkbutton(stateframe, text="IN1", variable=self.varIN1)
        self.checkIN1.pack(side="left", fill="x", pady=2, padx=2, expand=True)
        CreateToolTip(self.checkIN1, """Регистр IN1""")

        self.varHOME = tk.IntVar()
        self.checkHOME = tk.Checkbutton(stateframe, text="HOME", variable=self.varHOME)
        self.checkHOME.pack(side="left", fill="x", pady=2, padx=2, expand=True)
        CreateToolTip(self.checkHOME, """Регистр HOME""")

        moveframe = ttk.LabelFrame(frame_work, text="Параметры движения", labelanchor="n")
        moveframe.pack(side="top", fill="x", pady=2, padx=2, expand=True)

        buttonMove = ttk.Button(moveframe, text="Начать движение", command=self.Button_Move)
        buttonMove.pack(side="bottom", fill="x", pady=2, expand=True)
        CreateToolTip(buttonMove, """Начать движение с заданными параметрами""")

        self.varCheckSpeed = tk.IntVar()
        speedcheck = ttk.Checkbutton(moveframe, text="Скорость", variable=self.varCheckSpeed)
        CreateToolTip(speedcheck, '''Использовать параметр "Скорость"''')

        speedframe = ttk.LabelFrame(moveframe, labelwidget=speedcheck, labelanchor="n")
        speedframe.pack(side="left", fill="both", padx=2, expand=True)

        self.spinSpeed = tk.Spinbox(speedframe, state="disabled", justify="center", from_=-1000, to=1000, width=10)
        self.spinSpeed.pack(side="top")
        CreateToolTip(self.spinSpeed, """Значение скорости""")

        speedcheck.config(command=lambda: self.on_cb_toggled(self.spinSpeed, self.varCheckSpeed))

        self.varCheckSteps = tk.IntVar()
        stepcheck = ttk.Checkbutton(moveframe, text="Шаги", variable=self.varCheckSteps)
        CreateToolTip(stepcheck, '''Использовать параметр "Шаги"''')

        stepframe = ttk.LabelFrame(moveframe, labelwidget=stepcheck, labelanchor="n")
        stepframe.pack(side="left", fill="both", padx=2, expand=True)

        self.spinSteps = tk.Spinbox(stepframe, state="disabled", justify="center", from_=1, to=1000, width=10)
        self.spinSteps.pack(side="top")
        CreateToolTip(self.spinSteps, """Значение шагов""")

        stepcheck.config(command=lambda: self.on_cb_toggled(self.spinSteps, self.varCheckSteps))

        self.varCheckEdge = tk.IntVar()
        edgecheck = ttk.Checkbutton(moveframe, text="Ограничения", variable=self.varCheckEdge)
        CreateToolTip(edgecheck, '''Использовать параметр "Ограничения"''')

        edgeframe = ttk.LabelFrame(moveframe, labelwidget=edgecheck, labelanchor="n")
        edgeframe.pack(side="left", fill="both", padx=2, expand=True)

        edges = ("STEP", "DIR", "IN1", "IN2", "HOME")
        self.varEdge = tk.StringVar()
        self.varEdge.set(edges[0])
        comboEdge = ttk.Combobox(edgeframe, textvariable=self.varEdge, values=edges, state="disabled", justify="center")
        comboEdge.pack(side="top")
        CreateToolTip(comboEdge, """Значение ограничения""")

        edgecheck.config(command=lambda: self.on_cb2_toggled(comboEdge, self.varCheckEdge))

        cfgframe = ttk.LabelFrame(frame_work, text="Конфигурирование", labelanchor="n")
        cfgframe.pack(side="top", fill="x", pady=2, padx=2, expand=True)

        frame = ttk.Frame(cfgframe)
        frame.pack(side="bottom", fill="both", ipady=2, ipadx=2, pady=2, padx=2, expand=True)

        self.btnReset = ttk.Button(frame, text="Перезагрузка", command=self.Button_Reset)
        self.btnReset.pack(side="left", fill="x", padx=2, expand=True)
        CreateToolTip(self.btnReset, """Восстановить настройки по-умолчанию""")

        self.btnSave = ttk.Button(frame, text="Сохранить", command=self.Button_Save)
        self.btnSave.pack(side="left", fill="x", padx=2, expand=True)
        CreateToolTip(self.btnSave, """Сохранить настройки в ПЗУ OSM""")

        self.varCode = tk.StringVar()
        self.comboCode = ttk.Combobox(cfgframe, textvariable=self.varCode, values=None, state="readonly", justify="center")
        self.comboCode.pack(side="left", fill="x", padx=2, expand=True)
        self.comboCode.bind("<<ComboboxSelected>>", lambda event: self.Code_Selected(event))
        CreateToolTip(self.comboCode, """Код параметра модуля OSM""")

        self.varCurVal = tk.StringVar()
        self.entryCurValue = ttk.Entry(cfgframe, textvariable=self.varCurVal, state="readonly", width=15, justify="center")
        self.entryCurValue.pack(side="left", fill="x", padx=2)
        CreateToolTip(self.entryCurValue, """Текущее значение параметра""")

        self.spinNewParam = tk.Spinbox(cfgframe, justify="center", from_=0, to=0, width=15)
        self.spinNewParam.pack(side="left", fill="x", padx=2)
        CreateToolTip(self.spinNewParam, """Новое значение параметра""")

        self.btnWrite = ttk.Button(cfgframe, state="disabled", text="Записать", command=self.Button_Config)
        self.btnWrite.pack(side="left", fill="x", padx=2)
        CreateToolTip(self.btnWrite, """Записать настройки в модуль OSM""")

        self.root.mainloop()

    def __del__(self):
        if self.transport:
            del self.transport
        if self.id_osm:
            del self.id_osm

    @staticmethod
    def on_cb_toggled(widget, var):
        widget.config(state="normal" if var.get() else "disabled")

    @staticmethod
    def on_cb2_toggled(widget, var):
        widget.config(state="readonly" if var.get() else "disabled")

    def Code_Selected(self, event=None):
        index = self.comboCode.current()

        if index != -1:
            self.btnWrite.config(state="normal")

            self.spinNewParam.config(from_=OSM17[self.varCode.get()]["min"], to=OSM17[self.varCode.get()]["max"])
            self.varCurVal.set(self.id_osm.get_param(self.varCode.get()))

    def Button_Save(self):
        self.id_osm.set_param("Command", CMD.SAVE_PARAMETERS)

    def Button_Reset(self):
        self.id_osm.reset()

    def Button_Config(self):
        self.id_osm.set_param(self.varCode.get(), int(self.spinNewParam.get()))

    def Tick(self):
        self.tick_task = self.root.after(500, self.Tick)

        try:
            state = self.id_osm.state()
            self.varSTEP.set(state["STEP"])
            self.varEN.set(state["EN"])
            self.varDIR.set(state["DIR"])
            self.varIN2.set(state["IN2"])
            self.varIN1.set(state["IN1"])
            self.varHOME.set(state["HOME"])
        except Exception:
            state = None
            self.varSTEP.set(False)
            self.varEN.set(False)
            self.varDIR.set(False)
            self.varIN2.set(False)
            self.varIN1.set(False)
            self.varHOME.set(False)

        self.varConn.set(int(bool(state)))
        color = "green" if self.varConn.get() else "red"
        self.checkConn.config(bg=color)

    def Button_Move(self):
        speed = int(self.spinSpeed.get()) if self.varCheckSpeed.get() else None
        steps = int(self.spinSteps.get()) if self.varCheckSteps.get() else None
        edge = self.varEdge.get() if self.varCheckEdge.get() else None
        self.id_osm.move(speed, steps, edge)

    def Port_Selected(self, event=None):
        if len(self.port_iid) > 0:
            self.buttonScan.config(state="normal")

    def Module_Selected(self, event=None):
        selected_unit = selected_baudrate = None

        for item in self.modulelist.selection():
            selected_unit, selected_baudrate = self.modulelist.item(item, "values")
            selected_unit = int(selected_unit)
            selected_baudrate = int(selected_baudrate)

        print(f"Selected module {selected_unit} with baudrate {selected_baudrate} at port {selected_port}")

        if self.transport:
            del self.transport
            self.transport = None
        if self.id_osm:
            del self.id_osm
            self.id_osm = None

        logging.basicConfig(level=logging.DEBUG if self.varDebug.get() else logging.INFO)

        self.id_osm = Client(port=selected_port, baudrate=selected_baudrate,
                             unit=selected_unit, timeout=self.varTimeout.get())

        self.comboCode.config(values=sorted(OSM17.keys()))

        if self.task:
            self.root.after_cancel(self.task)
            self.root.after_cancel(self.tick_task)

        self.task = self.root.after_idle(self.Tick)

    def Button_Scan(self):
        if self.task:
            self.root.after_cancel(self.task)
            self.root.after_cancel(self.tick_task)

        self.checkConn.config(bg="red")

        self.varConn.set(False)
        self.varSTEP.set(False)
        self.varEN.set(False)
        self.varDIR.set(False)
        self.varIN2.set(False)
        self.varIN1.set(False)
        self.varHOME.set(False)

        if self.transport:
            del self.transport
            self.transport = None
        if self.id_osm:
            del self.id_osm
            self.id_osm = None

        self.buttonScan.pack_forget()
        self.progressbar.pack(side="top", fill="x", pady=2)

        for iid in self.module_iid:
            self.modulelist.delete(iid)
        del self.module_iid[:]

        self.modulelist.update()

        global selected_port

        for item in self.portlist.selection():
            selected_port = self.portlist.item(item, "values")[0]

        print(f"Start scanning port {selected_port}")

        logging.basicConfig(level=logging.DEBUG if self.varDebug.get() else logging.INFO)

        for baudrate in (115200, 57600, 38400, 19200, 9600, 4800, 2400, 1200):
            for unit in range(1, 33):
                client = Client(port=selected_port, baudrate=baudrate, unit=unit,
                                timeout=self.varTimeout.get())
                with contextlib.suppress(Exception):
                    if client.state():
                        iid = self.modulelist.insert("", "end", values=(unit, baudrate))
                        self.module_iid.append(iid)
                        time.sleep(self.varTimeout.get())

                self.root.update()
                self.progressbar.step(1)
                del client

        print(f"Stop scanning port {selected_port}")

        self.progressbar.pack_forget()
        self.buttonScan.pack(side="top", fill="x", pady=2)


if __name__ == "__main__":
    OsmGui()
