#! /usr/bin/env python3

import argparse
import contextlib
import logging
import time

from osm.client import Client
from osm.device import OSM17

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="OSM controllers command-line option")

    parser.add_argument("--port", type=str, required=True,
                                  help="select port name")
    parser.add_argument("--timeout", type=float, nargs="?", metavar=("VALUE"),
                                     const=0.2,
                                     help="select timeout in seconds")
    parser.add_argument("--debug", action="store_true",
                                   help="print debug information")
    group1 = parser.add_argument_group("Scanner")
    group1.add_argument("--scan", action="store_true",
                                  help="scan available modules")
    group2 = parser.add_argument_group("User")
    group2.add_argument("--baudrate", type=int,
                                      help="select OSM baudrate")
    group2.add_argument("--unit", type=int,
                                  help="select OSM address")
    group2_ex = group2.add_mutually_exclusive_group()
    group2_ex.add_argument("--reset", action="store_true",
                                      help="send RESET request")
    group2_ex.add_argument("--state", action="store_true",
                                      help="read OSM state")
    group2_ex.add_argument("--get", type=str, nargs=1, metavar=("KEY"),
                                    choices=sorted(OSM17),
                                    help="read config value")
    group2_ex.add_argument("--set", type=str, nargs=2, metavar=("KEY", "VALUE"),
                                    help="write config value")
    group2_ex.add_argument("--move", type=str, nargs="+", metavar=("ARG"),
                                     help="send MOVE command with Speed, Steps, Edge")
    args = parser.parse_args()

    timeout = args.timeout or 0.2
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    if args.scan:
        for baudrate in (115200, 57600, 38400, 19200, 9600, 4800, 2400, 1200):
            for unit in range(1, 33):
                client = Client(port=args.port, baudrate=baudrate, unit=unit,
                                timeout=timeout)
                with contextlib.suppress(Exception):
                    if client.state():
                        print(f"Unit: {unit}, Baudrate: {baudrate} - OK")
                        time.sleep(timeout)
    else:
        client = Client(port=args.port, baudrate=args.baudrate, unit=args.unit,
                        timeout=timeout)
        if args.state:
            print(client.state())
        elif args.reset:
            print(client.reset())
        elif args.get:
            print(f"{args.get[0]} = {client.get_param(args.get[0])}")
        elif args.set:
            print(client.set_param(args.set[0], int(args.set[1])))
        elif args.move:
            try:
                speed = int(args.move[0])
            except Exception:
                speed = 0

            try:
                steps = int(args.move[1])
            except Exception:
                steps = 0

            try:
                edge = args.move[2]
            except Exception:
                edge = ""

            print(client.move(speed, steps, edge))
